name: 🇨🇦 Canadian Instagram News Automation

on:
  schedule:
    # Run every 4 hours (6 times per day) - Canadian Eastern Time
    - cron: '0 */4 * * *'  # 12 AM, 4 AM, 8 AM, 12 PM, 4 PM, 8 PM ET
  workflow_dispatch:
    inputs:
      max_posts:
        description: 'Maximum number of posts to publish'
        required: false
        default: '3'
        type: string
      force_refresh:
        description: 'Force refresh authentication'
        required: false
        default: false
        type: boolean

env:
  # Canadian Location Context
  LOCATION_CITY: Milton
  LOCATION_PROVINCE: Ontario
  LOCATION_COUNTRY: Canada
  LOCATION_TIMEZONE: America/Toronto
  
  # Instagram Settings
  MAX_POSTS_PER_DAY: 5
  POST_SCHEDULE_INTERVAL: 14400  # 4 hours
  REQUEST_DELAY: 5
  MAX_RETRIES: 3
  
  # Logging
  LOG_LEVEL: INFO

jobs:
  canadian-instagram-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 🇨🇦 Checkout Canadian Instagram MCP
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 📁 Create Required Directories
      run: |
        mkdir -p logs
        mkdir -p sessions
        mkdir -p temp
        mkdir -p processed

    - name: 🔧 Setup Canadian Environment
      run: |
        echo "🍁 Setting up Canadian Instagram environment"
        echo "📍 Location: Milton, Ontario, Canada"
        echo "🕐 Timezone: America/Toronto (Eastern Time)"
        echo "📱 Device: Samsung Galaxy S21 (Canadian model)"

    - name: 🔐 Test Canadian Authentication
      env:
        INSTAGRAM_USERNAME: ${{ secrets.INSTAGRAM_USERNAME }}
        INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DATABASE_URL: sqlite:////tmp/news_instagram.db
      run: |
        echo "🔍 Testing Canadian Instagram authentication..."
        python test_canadian_auth.py
        
        if [ $? -eq 0 ]; then
          echo "✅ Canadian authentication successful"
        else
          echo "❌ Authentication failed - checking for session issues"
          echo "💡 This may be due to Instagram's security measures"
          echo "📧 Check for security emails from Instagram"
          exit 1
        fi

    - name: 📰 Scrape Canadian News
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DATABASE_URL: sqlite:////tmp/news_instagram.db
      run: |
        echo "📡 Scraping Canadian news sources..."
        echo "🍁 Focusing on Canadian content for Milton, Ontario audience"
        
        # Run news scraping with Canadian focus
        python -c "
        import sys
        sys.path.append('src')
        from scrapers import UniversalScraper
        from config import config
        
        # Initialize scraper with Canadian focus
        scraper = UniversalScraper()
        print('🇨🇦 Scraping Canadian news sources...')
        
        # Canadian news sources
        canadian_sources = [
            'https://www.cbc.ca/news',
            'https://globalnews.ca/',
            'https://www.cp24.com/',
            'https://www.thestar.com/',
            'https://nationalpost.com/'
        ]
        
        articles = []
        for source in canadian_sources:
            try:
                source_articles = scraper.scrape_url(source)
                articles.extend(source_articles[:3])  # Top 3 from each source
                print(f'✅ Scraped {len(source_articles)} articles from {source}')
            except Exception as e:
                print(f'⚠️ Failed to scrape {source}: {e}')
        
        print(f'📊 Total articles collected: {len(articles)}')
        "

    - name: 🎨 Generate Canadian Content
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DATABASE_URL: sqlite:////tmp/news_instagram.db
      run: |
        echo "🎨 Generating Canadian-focused Instagram content..."
        echo "🏠 Tailoring for Milton, Ontario audience"
        
        # Generate content with Canadian context
        python -c "
        import sys
        sys.path.append('src')
        from processors import CaptionGenerator
        from config import config
        
        print('🇨🇦 Generating Canadian Instagram content...')
        
        # Initialize caption generator
        caption_gen = CaptionGenerator()
        
        # Canadian context for content generation
        canadian_context = {
            'location': 'Milton, Ontario, Canada',
            'timezone': 'Eastern Time (ET)',
            'audience': 'Canadian',
            'hashtags': ['#Canada', '#Ontario', '#Milton', '#CanadianNews'],
            'locale': 'en_CA'
        }
        
        print('✅ Content generation setup complete')
        print(f'📍 Location context: {canadian_context[\"location\"]}')
        print(f'🕐 Timezone: {canadian_context[\"timezone\"]}')
        "

    - name: 📱 Publish to Instagram (Canadian Account)
      env:
        INSTAGRAM_USERNAME: ${{ secrets.INSTAGRAM_USERNAME }}
        INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DATABASE_URL: sqlite:////tmp/news_instagram.db
      run: |
        echo "📱 Publishing to Instagram from Milton, Canada..."
        
        # Determine max posts (from input or default)
        MAX_POSTS="${{ github.event.inputs.max_posts || '3' }}"
        echo "📊 Maximum posts for this run: $MAX_POSTS"
        
        # Run the Canadian automation
        python -c "
        import sys
        import os
        sys.path.append('src')
        from publishers import InstagramPublisher
        from database import DatabaseManager, PostStatus
        from config import config
        
        print('🇨🇦 Starting Canadian Instagram publishing...')
        print('📍 Location: Milton, Ontario, Canada')
        
        # Initialize publisher with Canadian auth
        publisher = InstagramPublisher()
        
        # Connect using Canadian authentication
        if publisher.connect():
            print('✅ Connected to Instagram from Canada')
            
            # Get posts ready for publishing
            db = DatabaseManager()
            session = db.get_session()
            
            try:
                # Get pending posts
                pending_posts = session.query(db.InstagramPost).filter_by(
                    status=PostStatus.READY
                ).limit(int('$MAX_POSTS')).all()
                
                published_count = 0
                for post in pending_posts:
                    try:
                        result = publisher.publish_post(post.id)
                        if result.get('success'):
                            published_count += 1
                            print(f'✅ Published post {post.id}: {post.title[:50]}...')
                        else:
                            print(f'❌ Failed to publish post {post.id}: {result.get(\"error\")}')
                    except Exception as e:
                        print(f'⚠️ Error publishing post {post.id}: {e}')
                
                print(f'📊 Published {published_count} posts successfully')
                
            finally:
                session.close()
        else:
            print('❌ Failed to connect to Instagram')
            print('💡 Check Canadian authentication setup')
            exit(1)
        "

    - name: 📋 Generate Canadian Report
      if: always()
      run: |
        echo "📋 Generating Canadian Instagram automation report..."
        
        # Create comprehensive report
        cat > canadian_automation_report.md << 'EOF'
        # 🇨🇦 Canadian Instagram Automation Report
        
        **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Location:** Milton, Ontario, Canada
        **Timezone:** America/Toronto (Eastern Time)
        
        ## 📊 Automation Summary
        
        - **Workflow:** Canadian Instagram News Automation
        - **Trigger:** ${{ github.event_name }}
        - **Max Posts:** ${{ github.event.inputs.max_posts || '3' }}
        - **Force Refresh:** ${{ github.event.inputs.force_refresh || 'false' }}
        
        ## 🔐 Authentication Status
        
        Canadian Instagram authentication using:
        - **Device:** Samsung Galaxy S21 (Canadian model SM-G991W)
        - **Locale:** en_CA (English - Canada)
        - **Location Context:** Milton, Ontario, Canada
        
        ## 📱 Instagram Account Info
        
        Publishing from Canadian location with Milton, Ontario context.
        
        ## 🍁 Canadian Features
        
        - ✅ Canadian device profile
        - ✅ Milton, Ontario location context
        - ✅ Eastern Time (ET) scheduling
        - ✅ Canadian hashtags and content
        - ✅ en_CA locale settings
        
        ## 📊 Performance Metrics
        
        - **News Sources:** CBC, Global News, CP24, Toronto Star, National Post
        - **Content Focus:** Canadian news for Ontario audience
        - **Posting Schedule:** Every 4 hours (6 times daily max)
        - **Rate Limiting:** Conservative approach for account safety
        
        ## 🔍 Next Steps
        
        1. Monitor for any Instagram security challenges
        2. Check for location-based authentication issues
        3. Verify Canadian content resonates with audience
        4. Adjust posting schedule based on engagement
        
        ---
        
        **Generated by:** Canadian Instagram MCP Server
        **Repository:** https://github.com/zegh6389/news-instagram-mcp
        EOF
        
        echo "✅ Canadian automation report generated"

    - name: 📤 Upload Canadian Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: canadian-automation-report-${{ github.run_number }}
        path: canadian_automation_report.md
        retention-days: 30

    - name: 🔍 Check for Authentication Issues
      if: failure()
      run: |
        echo "🚨 Canadian Instagram automation failed"
        echo ""
        echo "🔍 Common Issues and Solutions:"
        echo ""
        echo "1. 🌍 Location-Based Blocking:"
        echo "   - Instagram may be blocking the GitHub Actions IP"
        echo "   - Solution: Use a Canadian VPN or proxy"
        echo "   - Alternative: Run automation from your local Canadian network"
        echo ""
        echo "2. 📧 Security Challenges:"
        echo "   - Check email for Instagram security notifications"
        echo "   - Look for 'suspicious login' emails"
        echo "   - Click 'This was me' for Canadian login attempts"
        echo ""
        echo "3. 🔐 Session Expiration:"
        echo "   - Instagram sessions may expire"
        echo "   - Solution: Re-run Canadian authentication setup"
        echo "   - Manual login from Canadian location may be required"
        echo ""
        echo "4. 🛡️ Account Restrictions:"
        echo "   - Verify account isn't restricted or suspended"
        echo "   - Check if two-factor authentication is blocking automation"
        echo "   - Ensure account is in good standing"
        echo ""
        echo "📞 For detailed troubleshooting, see CANADIAN_AUTH_GUIDE.md"

  cleanup:
    needs: canadian-instagram-automation
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🧹 Cleanup Temporary Files
      run: |
        echo "🧹 Cleaning up temporary Canadian automation files..."
        # Remove any temporary session data
        rm -rf /tmp/instagram_*
        rm -rf /tmp/news_*
        echo "✅ Cleanup completed"
