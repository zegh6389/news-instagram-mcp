name: Test GitHub Secrets

on:
  workflow_dispatch:

jobs:
  test-secrets:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test Instagram Connection
      env:
        INSTAGRAM_USERNAME: ${{ secrets.INSTAGRAM_USERNAME }}
        INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DATABASE_URL: 'sqlite:////tmp/test_instagram.db'
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "Testing GitHub Actions environment..."
        python debug_github_env.py
        
    - name: Test MCP Server Initialization
      env:
        INSTAGRAM_USERNAME: ${{ secrets.INSTAGRAM_USERNAME }}
        INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DATABASE_URL: 'sqlite:////tmp/test_instagram.db'
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "Testing MCP Server with real credentials..."
        python -c "
        import sys
        sys.path.insert(0, '.')
        sys.path.insert(0, 'src')
        
        try:
            from src.mcp_server import NewsInstagramMCPServer
            server = NewsInstagramMCPServer()
            print('✅ MCP Server initialized successfully with real Instagram connection!')
            print(f'Publisher type: {type(server.instagram_publisher).__name__}')
        except Exception as e:
            print(f'❌ Error: {e}')
            sys.exit(1)
        "
        
    - name: Test News Scraping
      env:
        INSTAGRAM_USERNAME: ${{ secrets.INSTAGRAM_USERNAME }}
        INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DATABASE_URL: 'sqlite:////tmp/test_instagram.db'
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "Testing news scraping..."
        python -c "
        import sys, asyncio
        sys.path.insert(0, '.')
        sys.path.insert(0, 'src')
        
        async def test_scraping():
            from src.mcp_server import NewsInstagramMCPServer
            server = NewsInstagramMCPServer()
            result = await server._scrape_news_tool({'limit': 5})
            print('✅ News scraping test completed!')
            return result
            
        asyncio.run(test_scraping())
        "
